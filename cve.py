from ipfabric import IPFClient
from ipfabric.tools import Vulnerabilities
from collections import defaultdict
import pandas as pd


def load_cve(ipf):
    devices = ipf.inventory.devices.all()
    vuln = Vulnerabilities(ipf=ipf, cve_limit=200)
    versions = vuln.check_versions()
    cves = defaultdict(dict)
    for v in versions:
        if v.family not in cves[v.vendor]:
            cves[v.vendor][v.family] = defaultdict(dict)
        cves[v.vendor][v.family][v.version] = v.cves
    return devices, cves


def load_eol(ipf):
    return ipf.fetch_all(
        "tables/reports/eof/detail",
        columns=[
            "hostname",
            "siteName",
            "deviceSn",
            "vendor",
            "pid",
            "replacement",
            "sn",
            "endSale",
            "endMaintenance",
            "endSupport",
            "url",
            "dscr",
        ],
        filters={
            "or": [
                {"endSale": ["empty", False]},
                {"endMaintenance": ["empty", False]},
                {"endSupport": ["empty", False]},
            ]
        },
    )


def parse_cve(devices, cves):
    data, clean, error = [], [], []
    for dev in devices:
        if (
            dev["vendor"]
            and dev["family"]
            and dev["version"]
            and dev["vendor"] in cves
            and dev["family"] in cves[dev["vendor"]]
            and dev["version"] in cves[dev["vendor"]][dev["family"]]
        ):
            if cves[dev["vendor"]][dev["family"]][dev["version"]].error:
                error.append(
                    [
                        dev["hostname"],
                        dev["siteName"],
                        dev["snHw"],
                        dev["loginIp"],
                        dev["vendor"],
                        dev["family"],
                        dev["version"],
                        cves[dev["vendor"]][dev["family"]][dev["version"]].error,
                    ]
                )
                continue
            elif cves[dev["vendor"]][dev["family"]][dev["version"]].total_results == 0:
                clean.append(
                    [
                        dev["hostname"],
                        dev["siteName"],
                        dev["snHw"],
                        dev["loginIp"],
                        dev["vendor"],
                        dev["family"],
                        dev["version"],
                    ]
                )
                continue
            data.extend(
                [
                    dev["hostname"],
                    dev["siteName"],
                    dev["snHw"],
                    dev["loginIp"],
                    dev["vendor"],
                    dev["family"],
                    dev["version"],
                    c.cve_id,
                    c.description,
                    c.url,
                ]
                for c in cves[dev["vendor"]][dev["family"]][dev["version"]].cves
            )

        else:
            error.append(
                [
                    dev["hostname"],
                    dev["siteName"],
                    dev["snHw"],
                    dev["loginIp"],
                    dev["vendor"],
                    dev["family"],
                    dev["version"],
                    "Not Supported",
                ]
            )
    return data, clean, error


if __name__ == "__main__":
    ipf = IPFClient()
    devices, cves = load_cve(ipf)

    data, clean, error = parse_cve(devices, cves)

    eol = load_eol(ipf)

    df = pd.DataFrame(
        data,
        columns=[
            "device",
            "site",
            "serial",
            "ip",
            "vendor",
            "family",
            "version",
            "cve_id",
            "cve_description",
            "cve_url",
        ],
    )
    df_clean = pd.DataFrame(
        clean, columns=["device", "site", "serial", "ip", "vendor", "family", "version"]
    )
    df_error = pd.DataFrame(
        error,
        columns=[
            "device",
            "site",
            "serial",
            "ip",
            "vendor",
            "family",
            "version",
            "error",
        ],
    )
    df_eol = pd.DataFrame(eol)
    writer = pd.ExcelWriter("CVE_report.xlsx", engine="openpyxl")
    df.to_excel(writer, sheet_name="CVE DATA", index=False)
    df_clean.to_excel(writer, sheet_name="Clean Devices", index=False)
    df_error.to_excel(writer, sheet_name="CVE ERROR", index=False)
    df_eol.to_excel(writer, sheet_name="End of Life", index=False)
    writer.save()
